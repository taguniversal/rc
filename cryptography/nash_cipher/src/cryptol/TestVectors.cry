module TestVectors where

import NashCore

// Key is two arrays of 16 permutations each
type Key = ([16]Perm, [16]Perm)

// Test vector format with debug information
type TestVectorDebug = {
    key_bits : Key,
    raw_input : [32],
    expected_output : [32],
    final_state : PermState
}

// Create a permutation from two nibbles
makePerm : [4] -> [4] -> Perm
makePerm state trans = {
    next_state = state,
    transform = trans @ 0
}

// Convert block of bits to array of permutations
makePerms : [64] -> [16]Perm
makePerms bits = 
    [ makePerm (zero # [b0]) [b1]
    | b0 <- split (take`{16} bits)
    | b1 <- split (drop`{16} bits)
    ]

// Split 128 bits into two permutation arrays
splitKey : [128] -> Key
splitKey bits = (makePerms (take`{64} bits), makePerms (drop`{64} bits))

// Generate test output for a given key and input sequence
generate_test_output : Key -> [32] -> TestVectorDebug
generate_test_output key input = {
    key_bits = key,
    raw_input = input,
    expected_output = output,
    final_state = end_state
} where
    (red_perm, blue_perm) = key
    init_state = init_perm zero
    (output, end_state) = cipher_sequence`{32} red_perm blue_perm input init_state

// Property to verify test vector matches expected behavior
property test_vector_valid tv =
    tv.expected_output == output where
        (red_perm, blue_perm) = tv.key_bits
        init_state = init_perm zero
        (output, _) = cipher_sequence`{32} red_perm blue_perm tv.raw_input init_state

// Helper function to create a test vector from hex key
makeTestVector : [128] -> [32] -> TestVectorDebug
makeTestVector key_bits input = generate_test_output (splitKey key_bits) input