module NashKeys where

import NashCore

// Type for raw 128-bit key material
type RawKey = [128]

// Function to load a key in the format [<:AA9987E016931D993B2359B1103A88C6:>]
// We'll split this into permutation tables
load_key : RawKey -> CipherKey
load_key raw = {
    red_perm = extract_perm (take`{64} raw),
    blue_perm = extract_perm (drop`{64} raw),
    init_mem = zero    // Can be customized if needed
}
  where
    extract_perm : [64] -> PermKey
    extract_perm bits = {
        next_states = groupBy`{8} (take bits),  // First 32 bits for next states
        transforms  = groupBy`{8} (drop bits)    // Last 32 bits for transforms
    }

// Example key format (commented out as it's just for documentation)
/*
test_key : RawKey
test_key = [<:AA9987E016931D993B2359B1103A88C6:>]
*/

// Function to validate a loaded key meets cipher requirements
validate_key : CipherKey -> Bit
validate_key key = 
    // Each state must map to a valid next state
    (all (\x -> x < 8) (join key.red_perm.next_states)) /\
    (all (\x -> x < 8) (join key.blue_perm.next_states))