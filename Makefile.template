CC = gcc
CFLAGS = -Wall @@CFLAGS_EXTRA@@ -Iexternal/serd -Iexternal/mkrand -Iexternal/tinyosc
LDFLAGS = -lcrypto -ldl -lpthread -lsqlite3 -lm -lmxml4 -L/usr/local/lib

# For rcnode
rcnode_SRC = src/util.c src/main.c src/eval.c src/rdf.c \
   src/udp_send.c external/mkrand/mkrand.c external/tinyosc/tinyosc.c \
   src/osc.c  src/graph.c  src/invocation.c src/wiring.c

rcnode_OBJ = $(rcnode_SRC:.c=.o)
rcnode_OBJ := $(patsubst %, build/%, $(rcnode_OBJ))
rcnode_BIN = build/rcnode

# Ensure build + output directories exist
$(shell mkdir -p build/src output/time_series output/plotly)

all: $(rcnode_BIN) $(serdtest_BIN)

$(serdtest_BIN): $(serdtest_OBJ)
	$(CC) $(serdtest_OBJ) -o $(serdtest_BIN) $(LDFLAGS)

$(rcnode_BIN): $(rcnode_OBJ)
	$(CC) $(rcnode_OBJ) -o $(rcnode_BIN) $(LDFLAGS)

build/%.o: %.c
	mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf build output hugo-site/static/plots/*.html

check-ttl:
	@echo "🧠 Validating Turtle files in ontology..."
	@find ontology -name "*.ttl" | while read file; do \
		echo "🔍 Checking $$file..."; \
		rapper -i turtle -c "$$file" || exit 1; \
	done
	@echo "✅ All TTL files are valid."

.PHONY: all clean generate-plotly check-ttl
